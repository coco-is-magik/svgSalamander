name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Determine project version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build the project
        run: mvn clean package

      - name: Check if release for version exists
        id: release_check
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.VERSION;
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: version
              });
              core.info(`Release for version ${version} already exists.`);
              return { exists: 'true' };
            } catch (error) {
              core.info(`No release found for version ${version}.`);
              return { exists: 'false' };
            }
          result-encoding: string

      - name: Create GitHub Release with jars
        if: steps.release_check.outputs.exists == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: "Automated release for version ${{ env.VERSION }}"
          files: |
            target/*.jar
